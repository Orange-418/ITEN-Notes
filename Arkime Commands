Arkime:

basic operators: excluding an operator treats it as an AND
|| or
! not
() for grouping | Example: (http.method == "GET" || http.method == "POST") ip.dst == 192.168.1.2
exists:
http.uri regexp "/admin.*" will search for any URI that starts with "/admin".
bytes > 1000 && bytes < 5000 will search for sessions where the byte count is between 1000 and 5000.

port == 80
**********************
20/21 FTP
22 SSH
23 Telnet
25 SMTP
53 DNS
80 HTTP
443 HTTPS
445 SMB
1433/1434 MSSQL
3306 MySQL
3389 RDP
5060/5061 SIP
**********************

ip.src == 192.168.1.1
ip.dst == 192.168.1.2

bytes > 5000

http.host == "example.com"

http.useragent == "UserAgentStringHere"
http.useragent in "Chrome/"
http.useragent in "Macintosh" && http.useragent in "Firefox"
http.useragent in "iPhone"
http.useragent in "Edg/"
http.useragent in "Googlebot"
http.useragent in "PostmanRuntime"
http.useragent in "curl/"

http.statuscode == 404
401 Unauthorized
403 Forbidden
500 Internal Server Error
404 Not Found
429 Too Many Requests
503 Service Unavailable
405 Method Not Allowed
414 URI Too Long
413 Request Entity Too Large
502 Bad Gateway
504 Gateway Timeout
406 Not Acceptable
501 Not Implemented

dns.host == "suspicious.com"
dns.host in ".xyz" || dns.host in ".top"
dns.query == "example.com"
dns.query in "payload" || dns.query in "exploit" || dns.query in "password" || dns.query in "login"

tls.servername == "example.com"
tls.version == "SSLv3"

email.from == "suspicious@example.com"
email.subject contains "alert"

db.query contains "DROP" - Find potential SQL injection attempts.
Scanning and Recon:

packets > 10000 - High packet counts might indicate a scan or DDoS.
ip.dst == 192.168.1.1 and port.dst > 60000 - Attempts to connect to high-range ports on a target.

protocol == "icmp" - High counts of ICMP might indicate a ping flood.
bytes > 1000000 - Sessions with a large amount of data.

exists:file - Check if there were file transfers in sessions.
file.name == "suspicious.exe" - Search for specific filenames.
file.mime == "application/x-dosexec" - Look for executable file transfers.

http.uri contains "/c2/" - Many C2s use specific URIs; you can search for suspicious patterns.
dns.host regexp "^[a-z]{15,}.com$" - Look for algorithmically generated domain names (DGA).
http.xff exists - If X-Forwarded-For header exists, can indicate proxy use.
___________________________________________________________________________________________________________________________________________________________________________________________
CyberChef:

From Base64: Decodes Base64-encoded strings.
To Base64: Encodes strings to Base64.
From Hex: Decodes hexadecimal data.
To Hex: Encodes data to hexadecimal.

To String: Converts various data types to a string.
From Charcode: Converts character codes to a string.
To Charcode: Converts characters in a string to their corresponding character codes.
Timestamp to Date: Converts Unix timestamps to readable dates.

AES Decrypt/Encrypt: For data encrypted with AES.
ROT13: A simple substitution cipher.
XOR: XOR operation, which can be useful if data is XOR-obfuscated.

Gunzip: Decompresses Gzip-compressed data.
Gzip: Compresses data using the Gzip format.
Inflate/Deflate: For Zlib compression and decompression.

Regular expression: Helps to extract, replace, or modify specific patterns in the data.

Extract URLs: Extracts URLs from data.
Extract IP addresses: Pulls out IP addresses.
Entropy: Measures the randomness of data, which can help identify encryption or compression.

Parse IP range: Converts IP ranges into individual IPs.
CIDR Subnet Calculator: Provides information on CIDR notations.

ASCII to Binary: Converts ASCII data to its binary representation.
Binary to ASCII: Converts binary data back to ASCII.

Operations like MD5, SHA-1, SHA-256: Useful if you're dealing with hashed values and might want to recognize the type of hash or compare against known values.

JSON Beautify: Makes raw JSON logs more readable.
XML Beautify: Formats XML data for readability.
Data Visualization:
Byte Histogram: Provides a visual representation of byte values in your data.
___________________________________________________________________________________________________________________________________________________________________________________________
Just in case, windows event id's:

4624: Successful logon.
4625: Logon failure (can be indicative of brute-force attempts when seen in volume).
4634: Account was logged off.

4740: A user account was locked out.

4768: Kerberos authentication ticket was requested.
4769: Kerberos service ticket was requested.
4770: Kerberos service ticket was renewed.
4771: Kerberos pre-authentication failed (could be indicative of a brute-force or Kerberoasting).

4648: A logon was attempted using explicit credentials.

4672: Special privileges assigned to new logon (often seen with "Pass-the-Hash" (PtH) as the attacker gains elevated privileges).
4674: An operation was attempted on a privileged object.

4732: A member was added to a security-enabled local group (could indicate lateral movement or privilege escalation).
4728: A member was added to a security-enabled global group.

4720: A user account was created (could be an indicator of attacker persistence).

# Brute-force/Password Spray:
event.id: "4625" AND source.ip: "[suspicious_IP_here]"

# Kerberoasting:
event.id: "4771"

# User Account Lockouts:
event.id: "4740"

# Logon with Explicit Credentials (potential PtH):
event.id: "4648"

# Privilege Use:
event.id: "4672" OR event.id: "4674"

# Account Creation (potential attacker persistence):
event.id: "4720"
